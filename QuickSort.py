'''Быстрая сортировка (QuickSort) - это эффективный алгоритм сортировки, который использует стратегию "разделяй и властвуй". 
Алгоритм быстро сортирует массив, выбирая опорный элемент, разбивая массив на две подгруппы 
(элементы, меньшие опорного, и элементы, большие опорного), а затем рекурсивно сортирует подгруппы.
Вот пример реализации быстрой сортировки на языке Python:
'''
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less = [x for x in arr[1:] if x <= pivot]
        greater = [x for x in arr[1:] if x > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)

# Пример использования
my_array = [64, 25, 12, 22, 11]
sorted_array = quick_sort(my_array)
print("Отсортированный массив:", sorted_array)

'''

Объяснение шагов алгоритма:

1. **Выбор опорного элемента:** Обычно выбирается первый элемент массива (в данном случае `arr[0]`), но этот 
выбор может влиять на эффективность алгоритма в некоторых случаях.

2. **Разделение на подгруппы:** Все элементы, меньшие или равные опорному, помещаются в подгруппу 
"меньше", а все элементы, большие опорного, помещаются в подгруппу "больше".

3. **Рекурсивная сортировка подгрупп:** Применяется быстрая сортировка к подгруппам "меньше" и "больше". Этот процесс повторяется рекурсивно для каждой подгруппы.

4. **Объединение результатов:** Результаты рекурсивных вызовов объединяются с опорным элементом в конечный отсортированный массив.

Быстрая сортировка имеет среднюю временную сложность O(n log n), что делает её одним из самых эффективных алгоритмов сортировки. 
Однако, в худшем случае (если всегда выбирать наименьший или наибольший элемент в качестве опорного), временная сложность может 
стать квадратичной O(n^2). В практике часто применяют различные методы для выбора опорного элемента, чтобы избежать этого недостатка.
'''