'''
Counting Sort (сортировка подсчетом) - это линейный алгоритм сортировки, который работает для целочисленных элементов в 
ограниченном диапазоне. В отличие от многих других сортировок, он не использует сравнения между элементами массива. 
Вместо этого алгоритм основывается на подсчете количества вхождений каждого элемента в массив и затем использует эти сведения 
для построения отсортированного массива.

Процесс сортировки подсчетом:

1. **Подсчет частоты встречаемости каждого элемента:** Проходим по входному массиву и для 
каждого элемента увеличиваем соответствующий счетчик.

2. **Вычисление префиксных сумм:** Суммируем значения счетчиков так, чтобы получить информацию о том, 
сколько элементов в массиве меньше или равны каждому элементу.

3. **Построение отсортированного массива:** Создаем новый массив той же длины, что и входной, и 
расставляем элементы в правильном порядке, используя префиксные суммы для определения позиции каждого элемента.

Пример реализации сортировки подсчетом на Python:
'''
def counting_sort(arr):
    # Находим максимальное и минимальное значения в массиве
    max_val, min_val = max(arr), min(arr)
    
    # Вычисляем размер временного массива
    range_of_elements = max_val - min_val + 1
    
    # Инициализируем временный массив для подсчета частоты вхождений
    count = [0] * range_of_elements
    
    # Считаем частоту вхождений каждого элемента
    for num in arr:
        count[num - min_val] += 1
    
    # Вычисляем префиксные суммы
    for i in range(1, range_of_elements):
        count[i] += count[i - 1]
    
    # Инициализируем отсортированный массив
    sorted_arr = [0] * len(arr)
    
    # Ставим элементы в правильное место в отсортированном массиве
    for num in reversed(arr):
        sorted_arr[count[num - min_val] - 1] = num
        count[num - min_val] -= 1
    
    return sorted_arr

# Пример использования
my_array = [4, 2, 5, 1, 3, 5, 1]
sorted_array = counting_sort(my_array)
print("Отсортированный массив:", sorted_array)
'''
Сортировка подсчетом эффективна, когда диапазон значений в массиве не слишком велик по сравнению с размером массива. 
Временная сложность сортировки подсчетом составляет O(n + k), где n - размер массива, а k - размер диапазона значений.
'''